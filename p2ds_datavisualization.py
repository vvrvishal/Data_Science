# -*- coding: utf-8 -*-
"""DataVisualization DS2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WrFFeaipCrnrRs_Le1BS8EDzpcMNWUDV

Scatter plot

A scatter plot is a set of points that represents the values obtained for two different variables plotted on a horizontal and vertical axes

When to use scatter plots?

Scatter plots are used to convey the relationship between two numerical variables

Scatter plots are sometimes called correlation plots because they show how two variables are correlated
"""

import matplotlib.pyplot as plt
#create a figure and axis
fig, ax = plt.subplots()

x = [2,4,6,6,9,2,7,2,6,1,8,4,5,9,1,2,3,7,5,8,1,3]
y = [7,8,2,4,6,4,9,5,9,3,6,7,2,4,6,7,1,9,4,3,6,9]

ax.scatter(x,y)

import pandas as pd
iris = pd.read_csv('/content/iris.csv', names=['sepal_length', 'sepal_width', 'petal_length','petal_width', 'class'])
print(iris.head())

import matplotlib.pyplot as plt
#create a figure and axis
fig, ax = plt.subplots()

#scatter the sepal_length against the sepal_width
ax.scatter(iris['sepal_length'], iris['sepal_width'])
#set a title and labels
ax.set_title('Iris Dataset')
ax.set_xlabel('sepal_length')
ax.set_ylabel('sepal_width')

import pandas as pd
cars_data=pd.read_csv('/content/Toyota.csv', index_col=0)
cars_data.head()

import matplotlib.pyplot as plt
plt.scatter(cars_data['Age'],cars_data['Price'],c='red')
plt.show()

"""Line chart
n Matplotlib we can create a line chart by calling the plot method. We can also plot multiple columns in one graph, by looping through the columns we want and plotting each column on the same axis.
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
x=range(1,6)
y=np.random.randint(1,20,5)
plt.plot(x,y)

plt.xticks(x)
plt.yticks(y)

import matplotlib.pyplot as plt
#create a figure and axis
fig, ax = plt.subplots()

x = [2,4,6,6,9,2,7,2,6,1,8,4,5,9,1,2,3,7,5,8,1,3]
y = [7,8,2,4,6,4,9,5,9,3,6,7,2,4,6,7,1,9,4,3,6,9]

ax.plot(x,y)

import pandas as pd
df = pd.DataFrame({
    'name':['john','mary','peter','jeff','bill','lisa','jose'],
    'age':[23,78,22,19,45,33,20],
    'gender':['M','F','M','M','M','F','M'],
    'state':['california','dc','california','dc','california','texas','texas'],
    'num_children':[2,0,0,3,2,1,4],
    'num_pets':[5,1,0,5,2,2,3]
})
#from pandas to plot multiple plots on some figure
#gca stands for 'get current axis'
ax = plt.gca()

df.plot(kind='line',x='name',y='num_children',ax=ax)
df.plot(kind='line',x='name',y='num_pets', color='red', ax=ax)

import pandas as pd
iris = pd.read_csv('/content/iris.csv', names=['sepal_length', 'sepal_width', 'petal_length','petal_width', 'class'])
print(iris.head())

#get columns to plot
columns = iris.columns.drop(['class'])
#create x data
x_data = range(0,iris.shape[0])
#create figure and axis
fig,ax=plt.subplots()
#plot each column
for column in columns:
  ax.plot(x_data, iris[column], label=column)
#set title and legend
ax.set_title('Iris Dataset')
ax.legend()

"""Histogram

In Matplotlib  we can create a Histogram using the hist method. If we pass it categorical data like the points column from the wine-review dataset it will automatically calculate how often each class occurs.
"""

#create figure and axis
fig, ax = plt.subplots()
#plot histogram
ax.hist(iris['sepal_length'])
#set title and labels
ax.set_title('iris')
ax.set_xlabel('sepal_length')
ax.set_ylabel('Frequency')

"""Bar Chart
A bar chart can be created using the bar method. The bar-chart isn’t automatically calculating the frequency of a category so we are going to use pandas value_counts function to do this. The bar-chart is useful for categorical data that doesn’t have a lot of different categories (less than 30) because else it can get quite messy.
"""

wine_reviews = pd.read_csv('/content/winemag-data-130k-v2.csv', index_col=0)
wine_reviews.head()

#Bar Chart
#create a figure and axis
fig, ax = plt.subplots()
#count the occurrence of each class
data = wine_reviews['points'].value_counts()
#get x and y data
points = data.index
frequency = data.values
#create bar chart
ax.bar(points, frequency)
#set title and labels
ax.set_title('Wine Review Scores')
ax.set_xlabel('Points')
ax.set_ylabel('Frequency')

wine_reviews['points'].value_counts().sort_index().plot.bar()

wine_reviews.groupby("country").price.mean().sort_values(ascending=False)[:5].plot.bar()

"""Adding more characteristics to bar graph"""

import numpy as np
import matplotlib.pyplot as plt
objects = ('Python', 'C++', 'Java','Perl','Scala','Lisp')
y_pos = np.arange(len(objects))
performance = [10,8,6,4,2,1]
# Bar Chart
# X Axis positions as first parameter list, it can be floating point numbers also
# Y Values as 2nd parameter list
# Alpha is transparency,
# Align can be center or edge
# Color can be single value or a list of color codes, one for each bar.
plt.bar(y_pos,performance, width=0.5,align='center',alpha=0.5,color=['r','r','g','g','b','b'])
# To define labels for x axis values.
plt.xticks(y_pos, objects)
plt.ylabel('Usage')
plt.xlabel('Programming Language')
plt.title('Programming Language usage')

# Importing the matplotlib library
import matplotlib.pyplot as plt

# Declaring the figure or the plot (y, x) or (width, height)
plt.figure(figsize= (12,7))

# Categorical data: Country names
countries = ['USA', 'Brazil', 'Russia', 'Spain','UK','India']

# Integer value interms of death counts
totalDeaths = [112596, 37312, 5971, 27136, 40597, 7449]

# Passing the parameters to the bar function, this is the main function which creates the bar plot
plt.bar(countries,totalDeaths, width=0.9,align='center', color='cyan', edgecolor='red')

# This is the location for the annotated text
i = 1.0
j= 2000

# Annotating the bar plot with the values (total death count)
for i in range(len(countries)):
  plt.annotate(totalDeaths[i], (-0.1 +i, totalDeaths[i] + j))

# Creating the legend of the bars in the plot
plt.legend(labels = ['Total Deaths'])

# Giving the title for the plot
plt.title("Bar plot representing the total deaths by top 6 countries due to coronavirus")

# Namimg the x and y axis
plt.xlabel('Countries')
plt.ylabel('Deaths')

# Saving the plot as a 'png'
plt.savefig('1BarPlot.png')

# Displaying the bar plot
plt.show()

"""Horizontal bar plot

It’s also really simple to make a horizontal bar-chart using the plot.barh() method. By adding one extra character ‘h’, we can align the bars horizontally. Also, we can represent the bars in two or more different colors, this will increase the readability of the plots.
"""

wine_reviews['points'].value_counts().sort_index().plot.barh()

# Importing the matplotlib library
import matplotlib.pyplot as plt

# Declaring the figure or the plot (y, x) or (width, height)
plt.figure(figsize=[14, 10])

# Passing the parameters to the bar function, this is the main function which creates the bar plot
# For creating the horizontal make sure that you append 'h' to the bar function name
plt.barh(['USA', 'Brazil', 'Russia', 'Spain', 'UK'], [2026493, 710887, 476658, 288797, 287399], label = "Danger zone", color = 'r')
plt.barh(['India', 'Italy', 'Peru', 'Germany', 'Iran'], [265928, 235278, 199696, 186205, 173832], label = "Not safe zone", color='g')

# Creating the legend of the bars in the plot
plt.legend()

# Namimg the x and y axis
plt.xlabel('Total cases')
plt.ylabel('Countries')

# Giving the tilte for the plo
plt.title('Top ten countries most affected by\n coronavirus')

# Saving the plot as a 'png'
plt.savefig('2BarPlot.png')

#displaying the bar plot
plt.show()

"""Stacking two bar plots on top of each other

At times you might want to stack two or more bar plots on top of each other. With the help of this, you can differentiate two separate quantities visually. To do this just follow.
"""

import pandas as pd
df= pd.DataFrame({'name':['john','mary','peter','jeff','bill','lisa','jose'],
    'age':[23,78,22,19,45,33,20],
    'gender':['M','F','M','M','M','F','M'],
    'state':['california','dc','california','dc','california','texas','texas'],
    'num_children':[2,0,0,3,2,1,4],
    'num_pets':[5,1,0,5,2,2,3]})

# From pandas to plot multiple plots on same figure
df.groupby(['state', 'gender']).size().unstack().plot(kind='bar',stacked=True)

df.groupby(['gender','state']).size().unstack().plot(kind='bar', stacked=True)

# Importing the matplotlib library
import matplotlib.pyplot as plt

# Declaring the figure or the plot (y, x) or (width, height)
plt.figure(figsize=[15,5])

# Categorical data: Country names
countries = ['USA', 'Brazil', 'Russia', 'Spain', 'UK', 'India']

# Integer value interms of total cases
totalCases = (2026493, 710887, 476658, 288797, 287399, 265928)

# Integer value interms of death counts
totalDeaths = (113055, 37312, 5971, 27136, 40597, 7473)

# Plotting both the total death and the total cases in a single plot. Formula total cases - total deaths
for i in range(len(countries)):
  plt.bar(countries[i], totalDeaths[i], bottom= totalCases[i] - totalDeaths[i], color='black')
  plt.bar(countries[i], totalCases[i] - totalDeaths[i], color='red')

# Creating the legend of the bars in the plot
plt.legend(labels = ['Total Deaths', 'Total Cases'])

# Giving the tilte for the plot
plt.title("Bar plot representing the total deaths and total cases country wise")

#Naming the x and y axis
plt.xlabel('Countries')
plt.ylabel('Cases')

# Saving the plot as a 'png'
plt.savefig('3BarPlot.png')

# Displaying the bar plot
plt.show()

"""Plotting two or bar plot next to another (Grouping)

Often many-a-times you might want to group two or more plots just to represent two or more different quantities or whatever. Also in the below code, you can learn to override the name of the x-axis with the name of your choice.
"""

import pandas as pd
from matplotlib import pyplot as plt

Data = {'Country': ['USA','Canada','Germany','UK','France'],
        'GDP_Per_Capita': [45000,42000,52000,49000,47000],
        'Income_Per_Capita': [4000,5000,7000,55000,60000]}

df = pd.DataFrame(Data)
# Multiple metrics in same chart
df.plot(x='Country', y=['GDP_Per_Capita', 'Income_Per_Capita'], kind = 'bar')

# Importing the matplotlib library
import numpy as np
import matplotlib.pyplot as plt

# Declaring the figure or the plot (y, x) or (width, height)
plt.figure(figsize=[15, 10])

# Data to be plotted
totalDeath = [113055, 37312, 5971, 7473, 33964]
totalRecovery = [773480, 325602, 230688, 129095, 166584]
activeCases = [1139958, 347973, 239999, 129360, 34730]
country = ['USA', 'Brazil', 'Russia', 'India', 'Italy']

# Using numpy to group 3 different data with bars
x=np.arange(len(totalDeath))

# Passing the parameters to the bar function, this is the main function which creates the bar plot
# Using X now to align the bars side by side
plt.bar(x, totalDeath, color = 'black', width=0.25)
plt.bar(x+0.25, totalRecovery, color='g', width=0.25)
plt.bar(x+0.5, activeCases, color='b', width=0.25)

# Creating the legend of the bars in the plot
plt.legend(['Total Deaths', 'Total Recovery', 'Active Cases'])

# Overiding the x axis with the country names
plt.xticks([i+ 0.25 for i in range(5)], country)

# Giving the tilte for the plot
plt.title("Bar plot representing the total deaths, total recovered cases and active cases country wise")

#Namimg the x and y axis
plt.xlabel('Countries')
plt.ylabel('Cases')

# Saving the plot as a 'png'
plt.savefig('4BarPlot.png')

#displaying the bar plot
plt.show()

"""Pie chart
A pie chart is a type of data visualization that is used to illustrate numerical proportions in data
"""

# Data Frame plotting
from pandas import DataFrame
import matplotlib.pyplot as plt

Data = {'Tasks': [300,500,700],
       'Task Type' : ['Tasks Pending','Tasks Ongoing','Tasks Completed']}

df = DataFrame(Data)
df.set_index('Task Type', inplace= True)

# autopct has extra % at the end as escape, as % is interpreted as formatting string begin by default.
# Only pie chart needs labels to be data frame index
df.plot.pie(y='Tasks', figsize=(10,10), autopct="%1.1f%%", startangle=90)

"""We will plot this data on a pie chart with Matplotlib's ax.pie() method. The pie piece labels are defined as a list of strings, and the pie piece sizes are defined as a list of integers. The code section below builds a pie chart with four pie pieces, each pie piece labeled with a relative size auto-calculated to the nearest 10th of a percent."""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# if using a Jupyter notebook, include:
# %matplotlib inline

# Pie chart, where the slices will be ordered and plotted counter-clockwise:
labels = ['Civil', 'Electrical', 'Mechanical', 'Chemical']
sizes = [15, 30, 45, 10]

# Explode out the 'Chemical' pie piece by offsetting it a greater amount
explode = (0.1,0.1,0.1,0.4)

fig, ax= plt.subplots()
ax.pie(sizes, explode= explode, labels=labels, autopct='%1.1f%%', shadow= True, startangle=90)
ax.axis('equal') #Equal aspect ratio ensures the pie chart is circular.
ax.set_title('Engineering Disciplines')

plt.show()

"""Subplots"""

plt.figure(figsize=(20,10))
plt.subplot(2,2,1)
plt.bar(range(1,6), np.random.randint(1,20,5))
plt.title("2,2,1")
plt.subplot(2,2,2)
plt.bar(range(1,6), np.random.randint(1,20,5))
plt.title("2,2,2")
plt.subplot(2,2,3)
# s is the size of dot
plt.scatter(range(1,6), np.random.randint(1,20,5), s=100, color="r")
plt.title("2,2,3")
plt.subplot(2,2,4)
plt.plot(range(1,6), np.random.randint(1,20,5), marker='o', color='g', linestyle='--')
plt.title("2,2,4")

plt.bar(range(1,6), np.random.randint(1,20,5), width=0.5)
plt.scatter(range(1,6), np.random.randint(1,20,5), s=200, color="r")
plt.plot(range(1,6), np.random.randint(1,20,5), marker='o', color='g', linestyle='--')